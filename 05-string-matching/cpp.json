{
    "string matching using kmp": {
		"prefix": "stringmatch",
		"body": [
			"void longestPrefixSuffix(string &str,vector<int>&lps) {",
			"    int n=str.size();",
			"    int i=0;",
			"    for(int j=1;j<n;j++){",
			"        if(str[j]==str[i]){",
			"            lps[j]=lps[j-1]+1;",
			"            i++;",
			"        }",
			"        else{",
			"            while(i>0){",
			"                i=lps[i-1];",
			"                if(str[j]==str[i]){",
			"                    lps[j]=i+1;",
			"                    i++;",
			"                    break;",
			"                }",
			"            }",
			"        }",
			"    }",
			"    return;",
			"}",
			"vector<int> search(string &pat, string &txt) {",
			"    int n = txt.size();",
			"    int m = pat.size();",
			"    vector<int> lps(m, 0);",
			"    vector<int> result;",
			"",
			"    longestPrefixSuffix(pat, lps);",
			"",
			"    int i = 0;",
			"    int j = 0; ",
			"    while (i < n) {",
			"        if (pat[j] == txt[i]) {",
			"            j++;",
			"            i++;",
			"        }",
			"",
			"        if (j == m) {",
			"            result.push_back(i - j);",
			"            j = lps[j - 1];",
			"        } else if (i < n && pat[j] != txt[i]) {",
			"            if (j != 0) {",
			"                j = lps[j - 1];",
			"            } else {",
			"                i++;",
			"            }",
			"        }",
			"    }",
			"",
			"    return result;",
			"}",
			""
		],
		"description": "string matching using kmp"
	}
}