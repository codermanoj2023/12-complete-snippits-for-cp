{
    "sum of a subset": {
        "prefix": "segmenttree",
        "body": [
            "",
            "class SegmentTree {",
            "    vector<int> tree;",
            "    vector<int> arr;",
            "    int n;",
            "",
            "public:",
            "    SegmentTree(vector<int> input) {",
            "        n = input.size();",
            "        arr = input;",
            "        tree.resize(4 * n);",
            "        build(0, 0, n - 1);",
            "    }",
            "",
            "    void build(int node, int start, int end) {",
            "        if (start == end) {",
            "            tree[node] = arr[start];",
            "            return;",
            "        }",
            "        int mid = start + (end - start) / 2;",
            "        build(2 * node + 1, start, mid);",
            "        build(2 * node + 2, mid + 1, end);",
            "        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];",
            "        return;",
            "    }",
            "",
            "    int range(int node, int start, int end, int left, int right) {",
            "        if (end < left || start > right) {",
            "            return 0;",
            "        }",
            "        if (start >= left && end <= right) {",
            "            return tree[node];",
            "        }",
            "        int mid = start + (end - start) / 2;",
            "        return range(2 * node + 1, start, mid, left, right) + range(2 * node + 2, mid + 1, end, left, right);",
            "    }",
            "",
            "    int query(int left, int right) {",
            "        return range(0, 0, n - 1, left, right);",
            "    }",
            "",
            "    void updateTree(int node,int start,int end,int i,int value){",
            "        if(i<start || i>end)return;",
            "",
            "        if(start==end){",
            "            tree[node]=value;",
            "            return;",
            "        }",
            "",
            "        tree[node]=tree[node]-arr[i]+value;",
            "",
            "        int mid=start+(end-start)/2;",
            "        updateTree(2*node+1,start,mid,i,value);",
            "        updateTree(2*node+2,mid+1,end,i,value);",
            "        return;",
            "    }",
            "",
            "    void update(int i,int value){",
            "        updateTree(0,0,n-1,i,value);",
            "        arr[i]=value;",
            "        return;",
            "    }",
            "};",
            ""
        ],
        "description": "sum of a subset"
    }
}